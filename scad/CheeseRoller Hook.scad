////////////////////////////////////////////////////////////////////////////////
// ### CUSTOMIZABLE VARIABLES
////////////////////////////////////////////////////////////////////////////////
// Number of vertical Skadis slots the hook should take
HEIGHT_UNITS = 2;

module __Customizer_Limit__() {}


////////////////////////////////////////////////////////////////////////////////
// ### OPENSCAD SPECIAL VARIABLES
////////////////////////////////////////////////////////////////////////////////
$fn = 36;


////////////////////////////////////////////////////////////////////////////////
// ### GLOBAL VARIABLES
////////////////////////////////////////////////////////////////////////////////
include <includes/CheeseRoller Variables.scad>
include <includes/CheeseRoller Variables Height Units.scad>

FILLET_RADIUS = 1;


////////////////////////////////////////////////////////////////////////////////
// ### GENERAL UTILITY MODULES
////////////////////////////////////////////////////////////////////////////////
include <includes/CheeseRoller Utilities.scad>


////////////////////////////////////////////////////////////////////////////////
// ### MAIN RENDERING
////////////////////////////////////////////////////////////////////////////////
main();


////////////////////////////////////////////////////////////////////////////////
// ### MODULES
////////////////////////////////////////////////////////////////////////////////
module main() {
    center_bar();
    hook_arms();
}


/// ### CENTER BAR
module center_bar() {
    rounded_cube([HOOK_W, HOOK_HEIGHT_TOTAL, HOOK_W], FILLET_RADIUS);
}


/// ### HOOK ARMS
module hook_arms() {
    for (i = [0 : HEIGHT_UNITS - 1]) {
        hook_arms_for_level(i);
    }
}

module hook_arms_for_level(level) {
    y_offset = level * (HOOK_H + HOOK_DIFF_V);
    translate([HOOK_W, y_offset, 0])
        hook_arm();
    translate([0, HOOK_H + y_offset, 0])
        rotate([0, 0, 180])
            hook_arm();
}

module hook_arm() {
    translate([HOOK_W, 0, 0])
        rounded_cube([HOOK_W, HOOK_H, HOOK_W], FILLET_RADIUS);
    translate([- FILLET_RADIUS * 2, 0, 0])
        rounded_cube([HOOK_W * 2 + FILLET_RADIUS * 2, HOOK_W, HOOK_W], FILLET_RADIUS);
}
